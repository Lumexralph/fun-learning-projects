{"version":3,"sources":["../server/app.js"],"names":["install","app","use","static","json","get","req","res","db","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","status","message","post","newIssue","body","created","Date","err","issue","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","connect","connection","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAGA;;;;;;AAFA,2BAAiBA,OAAjB;;AAIA,MAAMC,MAAM,wBAAZ;AACA;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACA;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEAH,IAAII,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnCC,KAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAA7B,EAAiCC,OAAjC,GACGC,IADH,CACQC,UAAU;AACd,UAAMC,WAAW;AACfC,mBAAaF,OAAOG;AADL,KAAjB;AAGAT,QAAIH,IAAJ,CAAS;AACPa,iBAAWH,QADJ;AAEPI,eAASL;AAFF,KAAT;AAID,GATH,EAUGM,KAVH,CAUSC,SAAS;AACdC,YAAQC,GAAR,CAAYF,KAAZ;AACAb,QAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,SAAU,0BAAyBJ,KAAM,EAA3C,EAArB;AACD,GAbH;AAcD,CAfD;;AAiBAnB,IAAIwB,IAAJ,CAAS,aAAT,EAAwB,CAACnB,GAAD,EAAMC,GAAN,KAAc;AACpC,QAAMmB,WAAWpB,IAAIqB,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAG,CAACH,SAASH,MAAb,EAAqB;AACnBG,aAASH,MAAT,GAAkB,KAAlB;AACD;AACD;AACA,QAAMO,MAAMC,MAAMC,aAAN,CAAoBN,QAApB,CAAZ;AACA,MAAII,GAAJ,EAAS;AACPvB,QAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,SAAU,oBAAmBM,GAAI,EAAnC,EAArB;AACA;AACD;AACDtB,KAAGC,UAAH,CAAc,QAAd,EAAwBwB,SAAxB,CAAkC,gBAAMC,YAAN,CAAmBR,QAAnB,CAAlC,EACId,IADJ,CACSuB,UAAU3B,GAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAE0B,KAAKD,OAAOE,UAAd,EAA7B,EAAyDC,KAAzD,CAA+D,CAA/D,EAAkEC,IAAlE,EADnB,EAGE3B,IAHF,CAGOc,YAAY;AAChBnB,QAAIH,IAAJ,CAASsB,QAAT;AACD,GALF,EAMEP,KANF,CAMQC,SAAS;AACdC,YAAQC,GAAR,CAAYF,KAAZ;AACAb,QAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB,EAAEoB,SAAU,0BAAyBJ,KAAM,EAA3C,EAArB;AACD,GATF;AAUD,CAtBD;;AAwBA,IAAIZ,EAAJ;AACA,qBAAYgC,OAAZ,CAAoB,kCAApB,EACoB5B,IADpB,CACyB6B,cAAc;AAClBjC,OAAKiC,UAAL;AACAxC,MAAIyC,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrBrB,YAAQC,GAAR,CAAY,0BAAZ;AACD,GAFD;AAGD,CANpB,EAOoBH,KAPpB,CAO0BC,SAAS;AACdC,UAAQC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACD,CATpB","file":"app.js","sourcesContent":["import  express from 'express';\r\nimport  bodyParser from 'body-parser';\r\nimport  { MongoClient } from 'mongodb';\r\nimport 'babel-polyfill';\r\nimport SourceMapSupport from 'source-map-support';\r\nSourceMapSupport.install();\r\n\r\nimport  Issue from './issue';\r\n\r\nconst app = express();\r\n// introduce middleware\r\napp.use(express.static('static'));\r\n// app.use(bodyParser.urlencoded());\r\napp.use(bodyParser.json());\r\n\r\n// // webpack middleware\r\n// if (process.env.NODE_ENV !== 'production') {\r\n//   const webpack = require('webpack');\r\n//   const webpackDevMiddleware = require('webpack-dev-middleware');\r\n//   const webpackHotMiddleware = require('webpack-hot-middleware');\r\n\r\n//   const config = require('../webpack.config');\r\n\r\n//   const bundler = webpack(config);\r\n//   app.use(webpackDevMiddleware(bundler, { noInfo: true, publicPath: config.output.publicPath }));\r\n\r\n//   app.use(webpackHotMiddleware(bundler, { log: console.log}));\r\n//  }\r\n\r\napp.get('/api/issues', (req, res) => {\r\n  db.collection('issues').find({}).toArray()\r\n    .then(issues => {\r\n      const metadata = {\r\n        total_count: issues.length\r\n      };\r\n      res.json({\r\n        _metadata: metadata,\r\n        records: issues\r\n      });\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n    });\r\n});\r\n\r\napp.post('/api/issues', (req, res) => {\r\n  const newIssue = req.body;\r\n  newIssue.created = new Date();\r\n  if(!newIssue.status) {\r\n    newIssue.status = 'New';\r\n  }\r\n  // validate\r\n  const err = issue.validateIssue(newIssue);\r\n  if (err) {\r\n    res.status(422).json({ message: `Invalid request: ${err}` });\r\n    return;\r\n  }\r\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue))\r\n     .then(result => db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\r\n   )\r\n   .then(newIssue => {\r\n     res.json(newIssue);\r\n   })\r\n   .catch(error => {\r\n     console.log(error);\r\n     res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n   })\r\n});\r\n\r\nlet db;\r\nMongoClient.connect('mongodb://localhost/issuetracker')\r\n                   .then(connection => {\r\n                     db = connection;\r\n                     app.listen(3000, () => {\r\n                       console.log('App started on port 3000');\r\n                     })\r\n                   })\r\n                   .catch(error => {\r\n                     console.log('ERROR:', error);\r\n                   });\r\n"]}