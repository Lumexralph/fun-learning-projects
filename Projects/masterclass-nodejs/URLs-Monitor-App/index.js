/**
 * Primary file for the API
*/

// Dependencies
const http = require('http');
const https = require('https');
const url = require('url');
const fs = require('fs');
const StringDecoder = require('string_decoder').StringDecoder;

const config = require('./lib/config');
const handlers = require('./lib/handlers');
const helpers = require('./lib/helpers');

// All the server logic for both http and https
const unifiedServer = (req, res) => {
    // Get the URL and parse it

    // Get the path from the URL
    const parsedUrl = url.parse(req.url, true);
    // Send a response to the path

    const path = parsedUrl.pathname;

    const trimmedPath = path.replace(/^\/+|\/+$/g, '');

     // Get the http method
     const method = req.method.toLowerCase();

     // Get the headers as object
     const headers = req.headers;
     // Log the request path from the client

    // Get query string as object
    const queryStringObject = parsedUrl.query;

    // Get payload if any
    const decoder = new StringDecoder('utf-8');

    // Since payload gets to the server in streams, we need to gather the data
    // by using an event handler on the req object that listens on the event "data"
    let buffer = '';

    req.on('data', (data) => {
        // the undecoded data gets decoded through the created decoder
        // this is how stream is handled in node
        buffer +=  decoder.write(data);
    });

    // To know that streaming of payload has ended, there is another event called "end"
    // used to know that the streaming of the data is done
    // even if there is no payload, the end event will always be called
    // a way to handle the body of request
    req.on('end', () => {
        buffer += decoder.end();

        // Define a router, it will be an object that has key has the path and value
        // as the handler
        const router = {
            ping: handlers.ping,
            users: handlers.users,
            tokens: handlers.tokens,
            checks: handlers.checks,
        };

        const pickedHandler = handlers[trimmedPath] ? handlers[trimmedPath] : handlers.notFound;

        // construct the data object to pass to the handler
        const data = {
            trimmedPath,
            queryStringObject,
            method,
            headers,
            payload: helpers.parseJsonToObject(buffer),
        };

        // Route the request to the handler chosen in the router object above
        pickedHandler(data, (statusCode, payload) => {
            // use the status code callback by the handler or use status code of 200
            statusCode = Number.isInteger(statusCode) ? statusCode : 200;

            // use the payload or use a default payload object
            payload = typeof payload === 'object' && payload !== null ? payload : {};

            // Convert the payload to a string
            const payloadString = JSON.stringify(payload);

            // Return the response
            // Tell any browser or client to parse the response as a JSON
            res.setHeader('Content-Type', 'application/json');
            res.writeHead(statusCode);

            res.end(payloadString);

            console.log(`Request is received on this path: ${method} request to ${trimmedPath}
            with a query object`, queryStringObject, headers, 'payload: ', buffer, 'with length', buffer.length,
        'status', statusCode);
        });

    });
}

// Instantiating the HTTP server
const httpServer = http.createServer((req, res) => {
    unifiedServer(req, res);
});

// Start the server
httpServer.listen(config.httpPort, () => console.log(`Server listening on port ${config.httpPort} in ${config.envName} mode`));


// Instantiating the HTTPS server with the options
// The https will have some configurations like SSL or TSL will
// It will require some key and certificate which will be used for the encryption
// And the decryption
// It will be the key generated by the openssl
const httpsSeverOptions = {
    key: fs.readFileSync('./https/key.pem'),
    cert: fs.readFileSync('./https/cert.pem')
};

const httpsServer = https.createServer(httpsSeverOptions, (req, res) => {
    unifiedServer(req, res);
});


// Start the server
httpsServer.listen(config.httpsPort, () => console.log(`Server listening on port ${config.httpsPort} in ${config.envName} mode`));
